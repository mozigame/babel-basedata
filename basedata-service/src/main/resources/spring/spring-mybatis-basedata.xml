<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd   
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<bean id="dataSourceBasedata" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		   <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="${spring.datasource-basedata.url}"/>
                <property name="username" value="${spring.datasource-basedata.username}"/>
                <property name="password" value="${spring.datasource-basedata.password}"/>
		<property name="minEvictableIdleTimeMillis" value="5000" />
		<property name="numTestsPerEvictionRun" value="10" />
		<property name="testOnBorrow" value="true" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="validationQuery" value="SELECT 1" />
		<property name= "validationQueryTimeout" value="1"/>
		<property name="maxActive" value="150"/>
		<property name="minIdle" value="5"/>
		<property name="maxIdle" value="20"/>
		<property name="initialSize" value="30"/>
		<property name="logAbandoned" value="true"/>
		<property name="removeAbandoned"  value="true"/>
		<property name="removeAbandonedTimeout" value="10"/>
		<property name="maxWait" value="1000"/>
		<property name="timeBetweenEvictionRunsMillis" value="10000"/>
     </bean>


	<!-- 将数据源映射到sqlSessionFactory中 -->
	<bean id="sqlSessionFactoryBasedata" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="dataSource" ref="dataSourceBasedata" />
		<property name="plugins">
            <array>
            	<bean id="sqlInterceptor" class="com.babel.basedata.logger.SqlInterceptor">
            		<!-- 以下配置优先于数据库的系统参数配置 -->
            		<property name="properties">
						<props>  
			                <prop key="sql.ignoreSqlType">select_seq,select_count</prop> 
			                <prop key="sql.ignoreKey">
			                	FROM tf_sysconfig WHERE ( IF_dEL = 0 and STATUS = 1 )
			                </prop>
			                <prop key="sql.ignoreSqlId"><!-- 忽略sql日志处理 -->
			                	ModelMapper:selectByExample
			                	LogDbMapper:insert
			                	LogDbMapper:insertList
			                	ThreadPoolMapper.selectByExample
			                	ThreadPoolMapper.selectCountByExample
			                </prop>
			                <prop key="sql.ignoreSqlIdOnLoad"><!-- 忽略sql日志仅在启动时，前60秒 -->
			                	ModuleMapper.selectByExample
			                	SysconfigMapper.selectByExample
			                	ThreadPoolMapper.selectByExample
			                	ThreadPoolMapper.selectCountByExample
			                </prop>
			            </props>
			         </property>
            	</bean>
                <bean class="com.github.pagehelper.PageHelper">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            dialect=mysql
                            reasonable=true
                            supportMethodsArguments=true
                            params=count=countSql
                            autoRuntimeDialect=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
	</bean>

	<!-- SqlSession模板类实例 -->
	<bean id="sessionTemplateBasedata" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg index="0" ref="sqlSessionFactoryBasedata" />
	</bean>
	
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
	  <property name="basePackage" value="com.babel.basedata.mapper" />
	  <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBasedata" />
	  <!-- example处理，所有表的实体属性忽略，即不进行select,insert,update处理 -->
	  <property name="propertyIgnoreAll" value="currentUserId,currentUser,version,create_disp,modify_disp"/>
	  <!-- example处理，具体表的实体属性忽略
	  	格式：className=ignoreProperties
	  	说明：一个类一行，属性多个以“,”隔开
	   -->
	  <property name="propertyIgnore">
	  	<value>
	  		com.babel.basedata.model.LookupPO=name
	  		com.babel.basedata.model.LookupItemPO=code,name
	  		com.babel.basedata.model.UserPO=code
	  		com.babel.basedata.model.LogDbPO=code,name,ifDel,status,modifyDate,modifyUser,createUser
	  		com.babel.basedata.model.LogMsgPO=code,name,ifDel,status,modifyDate,modifyUser
	  		com.babel.basedata.model.LogMsgDetailPO=code,name,ifDel,status,modifyDate,modifyUser,createUser,createDate
	  		com.babel.basedata.model.LogLoginPO=code,name,ifDel,status,modifyDate,modifyUser,createUser,createDate,remark
	  		com.babel.basedata.model.OptDataPO=code,name,status,modifyDate,modifyUser
	  		com.babel.basedata.model.ModelPO=code,name,ifDel,status,modifyDate,modifyUser,createUser
	  		com.babel.basedata.model.UserTokenPO=code,name,ifDel,status,modifyUser,createUser
	  		com.babel.basedata.model.UserRolePO=code,name
	  		com.babel.basedata.model.SysconfigUserPO=code,name,status
	  		com.babel.basedata.model.WxEventLogPO=modifyDate,modifyUser,createUser
	  		com.babel.basedata.model.ProductKeyPO=name,code
	  		com.babel.basedata.model.ProductCdkeyPO=createUser,modifyUser,ifDel
	  		com.babel.basedata.model.PassiveReplyPO=name
	  		
	  		com.babel.ext.model.TableDefinePO=code,name
	  		com.babel.ext.model.DataColumnPO=code,name
	  		com.babel.ext.model.DataRowPO=code,name
	  		
	  		com.babel.uaa_member.model.MemberBalancePO=createUser,modifyUser,ifDel
	  		
	  	</value>
	  </property>
	  <!-- -->
	  <property name="markerInterface" value="tk.mybatis.mapper.common.MapperMy"/>
	</bean>

	<!--======= 事务配置 Begin ================= -->
	<!-- 事务管理器（由Spring管理MyBatis的事务） -->
	<bean id="transactionManagerBasedata" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 关联数据源 -->
		<property name="dataSource" ref="dataSourceBasedata"></property>
	</bean>
	<!--======= 事务配置 End =================== -->
	
	<!-- 
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
 	-->

	<!--  -->
	<aop:config>
        <aop:pointcut id="appServiceBasedata" expression="execution(* com.babel.basedata.service..*Service*.*(..))"/>
        <aop:advisor advice-ref="txAdviceBasedata" pointcut-ref="appServiceBasedata"/>
    </aop:config>

    <tx:advice id="txAdviceBasedata" transaction-manager="transactionManagerBasedata">
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    
     
   
</beans>